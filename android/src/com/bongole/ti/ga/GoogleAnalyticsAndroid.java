/**
 * This file was auto-generated by the Titanium Module SDK helper for Android
 * Appcelerator Titanium Mobile
 * Copyright (c) 2009-2010 by Appcelerator, Inc. All Rights Reserved.
 * Licensed under the terms of the Apache Public License
 * Please see the LICENSE included with this distribution for details.
 *
 */
package com.bongole.ti.ga;

import java.lang.Thread.UncaughtExceptionHandler;
import java.util.HashMap;

import android.content.Context;
import com.google.analytics.tracking.android.*;
import org.appcelerator.kroll.KrollDict;
import org.appcelerator.kroll.KrollModule;
import org.appcelerator.kroll.annotations.Kroll;

import org.appcelerator.titanium.TiApplication;
import org.appcelerator.kroll.common.Log;
import org.appcelerator.kroll.common.TiConfig;


@Kroll.module(name="GoogleAnalyticsAndroid", id="com.bongole.ti.ga")
public class GoogleAnalyticsAndroid extends KrollModule
{

	// Standard Debugging variables
	private static final String LCAT = "GoogleAnalyticsAndroidModule";
	private static final boolean DBG = TiConfig.LOGD;

	// You can define constants with @Kroll.constant, for example:
	// @Kroll.constant public static final String EXTERNAL_NAME = value;
	
	public GoogleAnalyticsAndroid()
	{
		super();
	}

	@Kroll.onAppCreate
	public static void onAppCreate(TiApplication app)
	{
		Log.d(LCAT, "inside onAppCreate");
		// put module init code that needs to run when the application is created
	}

	// Methods
	@Kroll.method
	public void start(HashMap o)
	{
        Context ctx = TiApplication.getInstance().getApplicationContext();
		KrollDict dict = new KrollDict(o);
		
		GoogleAnalytics ga = GoogleAnalytics.getInstance(ctx);
		
		Integer period = 20;
		if( dict.containsKeyAndNotNull("dispatchInterval") ){
			period = dict.getInt("dispatchInterval");
            GAServiceManager.getInstance().setLocalDispatchPeriod(period);
		}

        if( dict.containsKeyAndNotNull("dryRun") ) {
            if( dict.getBoolean("dryRun") ){
                ga.setDryRun(true);
            }
        }

        if( dict.containsKeyAndNotNull("verbose") ) {
            if( dict.getBoolean("verbose") ){
                ga.getLogger().setLogLevel(Logger.LogLevel.VERBOSE);
            }
        }

		Tracker tracker = ga.getTracker(dict.getString("trackingId"));
		ga.setDefaultTracker(tracker);

        UncaughtExceptionHandler exceptionHandler = new ExceptionReporter(
                tracker,
                GAServiceManager.getInstance(),
                Thread.getDefaultUncaughtExceptionHandler(), ctx);

        Thread.setDefaultUncaughtExceptionHandler(exceptionHandler);
	}
	
	@Kroll.method
	public void trackScreen(KrollDict o)
	{
		KrollDict dict = new KrollDict(o);
		GoogleAnalytics ga = GoogleAnalytics.getInstance(TiApplication.getInstance().getApplicationContext());
		Tracker tracker = ga.getDefaultTracker();
		
		String screenName = null;
		if( dict.containsKeyAndNotNull("screenName") ){
			screenName = dict.getString("screenName");
		}

        tracker.send(MapBuilder
            .createAppView()
            .set(Fields.SCREEN_NAME, screenName)
            .build()
        );
	}
	
	@Kroll.method
	public void trackEvent(KrollDict o)
	{
		KrollDict dict = new KrollDict(o);
		GoogleAnalytics ga = GoogleAnalytics.getInstance(TiApplication.getInstance().getApplicationContext());
		Tracker tracker = ga.getDefaultTracker();

        String screenName = null;
		String category = null;
		String action = null;
		String label = null;
		Long value = null;

        if( dict.containsKeyAndNotNull("screenName") ) {
            screenName = dict.getString("screenName");
        }

		if( dict.containsKeyAndNotNull("category") ){
			category = dict.getString("category");
		}
		
		if( dict.containsKeyAndNotNull("action")){
			action = dict.getString("action");
		}
		
		if( dict.containsKeyAndNotNull("label")){
			label = dict.getString("label");
		}
		
		if( dict.containsKeyAndNotNull("value")){
			value = dict.getDouble("value").longValue();
		}
		
		tracker.send(MapBuilder
                .createEvent(category, action, label, value)
                .set(Fields.SCREEN_NAME, screenName)
                .build()
        );
	}
	
	@Kroll.method
	public void trackTiming(KrollDict o)
	{
		KrollDict dict = new KrollDict(o);
		GoogleAnalytics ga = GoogleAnalytics.getInstance(TiApplication.getInstance().getApplicationContext());
		Tracker tracker = ga.getDefaultTracker();
		
		String category = null;
		Long interval = null;
		String name = null;
		String label = null;
		
		if( dict.containsKeyAndNotNull("category") ){
			category = dict.getString("category");
		}
		
		if( dict.containsKeyAndNotNull("name")){
			name = dict.getString("name");
		}
		
		if( dict.containsKeyAndNotNull("label")){
			label = dict.getString("label");
		}
		
		if( dict.containsKeyAndNotNull("interval")){
			interval = dict.getDouble("interval").longValue();
		}	
		
		tracker.send(MapBuilder.createTiming(category, interval, name, label).build());
	}
	
	@Kroll.method
	public void startSession()
	{
		GoogleAnalytics ga = GoogleAnalytics.getInstance(TiApplication.getInstance().getApplicationContext());
		Tracker tracker = ga.getDefaultTracker();
        tracker.set(Fields.SESSION_CONTROL, "start");
	}
	
	@Kroll.method
	public void stoptSession()
	{
		GoogleAnalytics ga = GoogleAnalytics.getInstance(TiApplication.getInstance().getApplicationContext());
		Tracker tracker = ga.getDefaultTracker();
        tracker.set(Fields.SESSION_CONTROL, "end");
	}
}

